@page "/Palette"
@using System.Text.RegularExpressions

<MudSimpleTable Class="docs-class-table default-theme" Dense="true" Elevation="0" FixedHeader="true">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Default Light</th>
        <th>Default Dark</th>
        <th>CSS Variable</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var Row in ApiPalette)
    {
        <tr>
            <td>@Row.Name</td>
            <td>@Row.Type</td>
            <td>
                <div class="d-inline-flex align-center">
                    <MudPaper Outlined="true" Height="16px" Width="16px" Class="mr-2" Style="@($"background-color:{Row.Default}")"/>
                    @Row.Default
                </div>
                                        
            </td>
            <td>
                @if (!Row.Default.Equals(Row.Dark))
                {
                    <div class="d-inline-flex align-center">
                        <MudPaper Outlined="true" Height="16px" Width="16px" Class="mr-2" Style="@($"background-color:{Row.Dark}")"/>
                        @Row.Dark
                    </div>
                }
            </td>
            <td>@Row.CSSVariable</td>
        </tr>
    }
    </tbody>
</MudSimpleTable>


@code {
    MudTheme mudTheme = new MudTheme();

    private List<ApiDefaultTheme> ApiPalette = new List<ApiDefaultTheme>();


    protected override void OnInitialized()
    {
        LoadPalette();

    }

    private void LoadPalette()
    {
        foreach (var value in typeof(Palette).GetProperties())
        {
            var newprop = new ApiDefaultTheme()
            {
                Name = value.Name,
                Type = value.PropertyType.ToString(),
                Default = value.GetValue(mudTheme.PaletteLight, null),
                Dark = value.GetValue(mudTheme.PaletteDark, null),
                CSSVariable = $"--mud-palette-{GetCssVar(value.Name)}"
            };
            ApiPalette.Add(newprop);
        }
    }

    private string GetCssVar(string value)
    {
        if (value == "AppBar")
        {
            return value.ToLowerInvariant();
        }
        else if (value.Contains("ContrastText"))
        {
            return value.Replace("ContrastText", "-Text").ToLowerInvariant();
        }
        else if (value.Contains("Font"))
        {
            return value.Replace("Font", "-").ToLowerInvariant();
        }
        else if (value.Contains("LineHeight"))
        {
            return value.Replace("LineHeight", "-LineHeight").ToLowerInvariant();
        }
        else if (value.Contains("LetterSpacing"))
        {
            return value.Replace("LetterSpacing", "-LetterSpacing").ToLowerInvariant();
        }
        else if (value.Contains("TextTransform"))
        {
            return value.Replace("TextTransform", "-Text-Transform").ToLowerInvariant();
        }
        else if (value.Contains("BorderRadius"))
        {
            return value.Replace("BorderRadius", "-BorderRadius").ToLowerInvariant();
        }
        else
        {
            return Regex.Replace(value, @"\B[A-Z]", "-$&").ToLowerInvariant();
        }
    }

    private class ApiDefaultTheme
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public object Default { get; set; }
        public object Dark { get; set; }
        public string CSSClass { get; set; }
        public string CSSVariable { get; set; }
        public bool IsHeader { get; set; }
    }
}